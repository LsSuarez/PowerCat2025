// This file was auto-generated by ML.NET Model Builder.
using Microsoft.ML;
using Microsoft.ML.Data;
using System;
using System.Linq;
using System.IO;
using System.Collections.Generic;
using Microsoft.ML.Data;

namespace Pg1.ML
//Creacion del modelo Maching Learing para analisis sentimental.
{

    public partial class MLModelSentimentalAnalysis
    {
        //Creamos el modelo input para poder tener el comentario y label.
        #region model input class
        public class ModelInput
        {
            [LoadColumn(0)]
            [ColumnName("Comentario")]
            public string Comentario { get; set; }

            [LoadColumn(1)]
            [ColumnName("Label")]
            public float Label { get; set; }
        }
        #endregion
        //Creamos el modelo output para la prediccion del ML
        #region model output class
        public class ModelOutput
        {
            [ColumnName("Comentario")]
            public string Comentario { get; set; }

            [ColumnName("Label")]
            public uint Label { get; set; }

            [ColumnName("PredictedLabel")]
            public float PredictedLabel { get; set; }

            [ColumnName("Score")]
            public float[] Score { get; set; }
        }
        #endregion
//Nuestro ML.NET donde fue entrenada la data y se reflejara nuestras predicciones para mejorar nuestros productos.
        private static readonly string MLNetModelPath = Path.GetFullPath("./ML/SentimentalAnalysis/MLModelSentimentalAnalysis.mlnet");

        public static readonly Lazy<PredictionEngine<ModelInput, ModelOutput>> PredictEngine =
            new Lazy<PredictionEngine<ModelInput, ModelOutput>>(() => CreatePredictEngine(), true);

        private static PredictionEngine<ModelInput, ModelOutput> CreatePredictEngine()
        {
            var mlContext = new MLContext();

            // Forzar fallback a CPU para evitar error con LibTorchSharp (GPU)
            mlContext.GpuDeviceId = -1;
            mlContext.FallbackToCpu = true;

            if (!File.Exists(MLNetModelPath))
                throw new FileNotFoundException($"No se encontró el modelo en la ruta: {MLNetModelPath}");

            ITransformer mlModel = mlContext.Model.Load(MLNetModelPath, out _);
            return mlContext.Model.CreatePredictionEngine<ModelInput, ModelOutput>(mlModel);
        }

        public static ModelOutput Predict(ModelInput input)
        {
            if (input == null) throw new ArgumentNullException(nameof(input));

            var predEngine = PredictEngine.Value;
            var output = predEngine.Predict(input);

            // Aplicar softmax a los scores para normalizarlos
            var expScores = output.Score.Select(x => (float)Math.Exp(x));
            var sumExpScores = expScores.Sum();
            output.Score = expScores.Select(x => x / sumExpScores).ToArray();

            return output;
        }

        public static IOrderedEnumerable<KeyValuePair<string, float>> PredictAllLabels(ModelInput input)
        {
            var result = Predict(input);
            return GetSortedScoresWithLabels(result);
        }

        public static IOrderedEnumerable<KeyValuePair<string, float>> GetSortedScoresWithLabels(ModelOutput result)
        {
            var unlabeledScores = result.Score;
            var labelNames = GetLabels(result);

            var labeledScores = new Dictionary<string, float>();
            for (int i = 0; i < labelNames.Count(); i++)
            {
                labeledScores.Add(labelNames.ElementAt(i), unlabeledScores[i]);
            }

            return labeledScores.OrderByDescending(c => c.Value);
        }

        private static IEnumerable<string> GetLabels(ModelOutput result)
        {
            var schema = PredictEngine.Value.OutputSchema;
            var labelColumn = schema.GetColumnOrNull("Label");
            if (labelColumn == null)
            {
                throw new Exception("No se encontró la columna 'Label' en el esquema del modelo.");
            }

            var keyNames = new VBuffer<float>();
            labelColumn.Value.GetKeyValues(ref keyNames);
            return keyNames.DenseValues().Select(x => x.ToString());
        }
    }
}
