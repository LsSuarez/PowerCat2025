// This file was auto-generated by ML.NET Model Builder.
using Microsoft.ML;
using Microsoft.ML.Data;
using System;
using System.Linq;
using System.IO;
using System.Collections.Generic;

namespace Pg1.ML
//Creacion de las clases recomendation para poder predecir con Maching Learning.
{
    public partial class MLModelRecomendation
    {
        //Ceacion del modelo input class para poder tener el usuario
        #region model input class
        public class ModelInput
        {
            [LoadColumn(0)]
            [ColumnName(@"userId")]
            public string UserId { get; set; }

            [LoadColumn(1)]
            [ColumnName(@"productId")]
            public float ProductId { get; set; }

            [LoadColumn(2)]
            [ColumnName(@"rating")]
// La creacion de rating, aca podemos predecir el valor y recomendar a los usuarios
            public float Rating { get; set; }
        }
        #endregion

        #region model output class
        public class ModelOutput
        {
            [ColumnName(@"userId")]
            public string UserId { get; set; }

            [ColumnName(@"productId")]
            public float ProductId { get; set; }

            [ColumnName(@"rating")]
            public float Rating { get; set; }

            [ColumnName(@"Score")]
            public float Score { get; set; }
        }
        #endregion

// Le creacion de la prediccion.
        private static string MLNetModelPath = Path.GetFullPath("./ML/RecomendationMatrix/MLModelRecomendation.mlnet");

        public static readonly Lazy<PredictionEngine<ModelInput, ModelOutput>> PredictEngine = new Lazy<PredictionEngine<ModelInput, ModelOutput>>(() => CreatePredictEngine(), true);

        private static PredictionEngine<ModelInput, ModelOutput> CreatePredictEngine()
        {
            var mlContext = new MLContext();
            ITransformer mlModel = mlContext.Model.Load(MLNetModelPath, out var _);
            return mlContext.Model.CreatePredictionEngine<ModelInput, ModelOutput>(mlModel);
        }

        public static ModelOutput Predict(ModelInput input)
        {
            var predEngine = PredictEngine.Value;
            return predEngine.Predict(input);
        }
    }
}
